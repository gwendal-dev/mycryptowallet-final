{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar api = function api() {\n  var ccxt = require('ccxt');\n\n  var sum = 0;\n  var i = 0;\n\n  _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var exchangeId, exchangeClass, exchange;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            exchangeId = 'binance', exchangeClass = ccxt[exchangeId], exchange = new exchangeClass({\n              'apiKey': 'ySuKhuOVLAC0WExO0UkaEXJzpDSWUYtNU0r69I8cCf25pZm5N7NHUUGMNaMfq92m',\n              'secret': 'cfkSnMUbzk2n7a3IvlpB2hlIMSLdVnbh8wsh14MDO8DHzcYBuQeDZEFCyB5CzRuY',\n              'timeout': 30000,\n              'enableRateLimit': true // required! https://github.com/ccxt/ccxt/wiki/Manual#rate-limit\n\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))();\n};\n\nexport { api };","map":{"version":3,"sources":["/Users/gwendal/Desktop/mycryptowallet-final/app/javascript/plugins/Api.js"],"names":["api","ccxt","require","sum","i","exchangeId","exchangeClass","exchange"],"mappings":"AAAA;;;;;;;;AACA,IAAMA,GAAG,GAAG,SAANA,GAAM,GAAM;AAClB,MAAMC,IAAI,GAAGC,OAAO,CAAE,MAAF,CAApB;;AAEA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,2DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACSC,YAAAA,UADT,GACsB,SADtB,EAESC,aAFT,GAEyBL,IAAI,CAACI,UAAD,CAF7B,EAGSE,QAHT,GAGoB,IAAID,aAAJ,CAAmB;AAC5B,wBAAU,kEADkB;AAE5B,wBAAU,kEAFkB;AAG5B,yBAAW,KAHiB;AAI5B,iCAAmB,IAJS,CAIH;;AAJG,aAAnB,CAHpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;AAUC,CAhBD;;AAkBA,SAAQN,GAAR","sourcesContent":["'use strict';\nconst api = () => {\nconst ccxt = require ('ccxt');\n\nlet sum = 0;\nlet i = 0;\n\n(async function () {\n    const exchangeId = 'binance'\n        , exchangeClass = ccxt[exchangeId]\n        , exchange = new exchangeClass ({\n            'apiKey': 'ySuKhuOVLAC0WExO0UkaEXJzpDSWUYtNU0r69I8cCf25pZm5N7NHUUGMNaMfq92m',\n            'secret': 'cfkSnMUbzk2n7a3IvlpB2hlIMSLdVnbh8wsh14MDO8DHzcYBuQeDZEFCyB5CzRuY',\n            'timeout': 30000,\n            'enableRateLimit': true, // required! https://github.com/ccxt/ccxt/wiki/Manual#rate-limit\n        })\n}) ();\n}\n\nexport {api}\n"]},"metadata":{},"sourceType":"module"}