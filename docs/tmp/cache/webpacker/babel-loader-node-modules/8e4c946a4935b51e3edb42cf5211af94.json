{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar api = function api() {\n  var ccxt = require('ccxt');\n\n  var port = process.argv.length > 2 ? parseInt(process.argv[2]) : 3000; // default\n\n  require('cors-anywhere').createServer().listen(port, 'localhost');\n\n  var sum = 0;\n  var i = 0;\n\n  _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var exchangeId, exchangeClass, exchange;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            exchangeId = 'binance', exchangeClass = ccxt[exchangeId], exchange = new exchangeClass({\n              'apiKey': 'ySuKhuOVLAC0WExO0UkaEXJzpDSWUYtNU0r69I8cCf25pZm5N7NHUUGMNaMfq92m',\n              'secret': 'cfkSnMUbzk2n7a3IvlpB2hlIMSLdVnbh8wsh14MDO8DHzcYBuQeDZEFCyB5CzRuY',\n              'timeout': 30000,\n              'enableRateLimit': true // required! https://github.com/ccxt/ccxt/wiki/Manual#rate-limit\n\n            });\n            _context.t0 = Object;\n            _context.next = 4;\n            return exchange.fetchBalance();\n\n          case 4:\n            _context.t1 = _context.sent.total;\n\n            _context.t0.entries.call(_context.t0, _context.t1).forEach(function (item) {\n              if (item[1] > 0) {\n                var XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest;\n\n                var burl = \"https://api.binance.com\";\n                var query = '/api/v1/ticker/24hr';\n                query += \"?symbol=\".concat(item[0], \"USDT\");\n                var url = burl + query;\n                var ourRequest = new XMLHttpRequest();\n                ourRequest.setHeader(\"Access-Control-Allow-Origin\", \"localhost:3000\");\n                ourRequest.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n                ourRequest.setHeader(\"Access-Control-Allow-Methods\", \"GET,HEAD,OPTIONS,POST,PUT\");\n                ourRequest.setHeader(\"Access-Control-Allow-Headers\", \"Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers\");\n                ourRequest.open('GET', url, true);\n\n                ourRequest.onload = function () {\n                  var obj = JSON.parse(ourRequest.responseText);\n\n                  if (item[0] != 'USDT') {\n                    console.log(\"---------------------------------------------------\");\n                    console.log(\"\".concat(item[0], \" : \").concat(item[1]));\n                    console.log(\"\".concat(item[0], \" price : \").concat(obj.lastPrice, \"$\"));\n                    console.log(\"Balance \".concat(item[0], \" : \").concat(obj.lastPrice * item[1], \"$\"));\n                    sum += obj.lastPrice * item[1];\n                  } else {\n                    console.log(\"---------------------------------------------------\");\n                    console.log(\"\".concat(item[0], \" : \").concat(item[1]));\n                    console.log(\"\".concat(item[0], \" price : 1$\"));\n                    console.log(\"Balance \".concat(item[0], \" : \").concat(item[1] * 1, \"$\"));\n                    sum += 1 * item[1];\n                  }\n\n                  console.log(\"Balance total usd : \".concat(sum, \"$\"));\n                };\n\n                ourRequest.send();\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))();\n};\n\nexport { api };","map":{"version":3,"sources":["/Users/gwendal/Desktop/mycryptowallet-final/app/javascript/plugins/Api.js"],"names":["api","ccxt","require","port","process","argv","length","parseInt","createServer","listen","sum","i","exchangeId","exchangeClass","exchange","Object","fetchBalance","total","entries","forEach","item","XMLHttpRequest","burl","query","url","ourRequest","setHeader","open","onload","obj","JSON","parse","responseText","console","log","lastPrice","send"],"mappings":"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","sourcesContent":["'use strict';\nconst api = () => {\nconst ccxt = require ('ccxt');\nlet port = (process.argv.length > 2) ? parseInt (process.argv[2]) : 3000; // default\nrequire ('cors-anywhere').createServer ().listen (port, 'localhost')\nlet sum = 0;\nlet i = 0;\n\n(async function () {\n    const exchangeId = 'binance'\n        , exchangeClass = ccxt[exchangeId]\n        , exchange = new exchangeClass ({\n            'apiKey': 'ySuKhuOVLAC0WExO0UkaEXJzpDSWUYtNU0r69I8cCf25pZm5N7NHUUGMNaMfq92m',\n            'secret': 'cfkSnMUbzk2n7a3IvlpB2hlIMSLdVnbh8wsh14MDO8DHzcYBuQeDZEFCyB5CzRuY',\n            'timeout': 30000,\n            'enableRateLimit': true, // required! https://github.com/ccxt/ccxt/wiki/Manual#rate-limit\n        })\n    Object.entries((await exchange.fetchBalance()).total).forEach(item => {\n      if (item[1] > 0) {\n        const XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest;\n\n        const burl = \"https://api.binance.com\";\n\n        let query = '/api/v1/ticker/24hr';\n\n        query += `?symbol=${item[0]}USDT`;\n\n        const url = burl + query;\n\n        const ourRequest = new XMLHttpRequest();\n        ourRequest.setHeader(\"Access-Control-Allow-Origin\", \"localhost:3000\");\n        ourRequest.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n        ourRequest.setHeader(\"Access-Control-Allow-Methods\", \"GET,HEAD,OPTIONS,POST,PUT\");\n        ourRequest.setHeader(\"Access-Control-Allow-Headers\", \"Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers\");\n\n        ourRequest.open('GET',url,true);\n\n        ourRequest.onload = function(){\n            const obj = JSON.parse(ourRequest.responseText);\n            if (item[0] != 'USDT') {\n              console.log(\"---------------------------------------------------\");\n              console.log(`${item[0]} : ${item[1]}`);\n              console.log(`${item[0]} price : ${obj.lastPrice}$`);\n              console.log(`Balance ${item[0]} : ${obj.lastPrice * item[1]}$`);\n              sum += obj.lastPrice * item[1];\n            } else {\n              console.log(\"---------------------------------------------------\");\n              console.log(`${item[0]} : ${item[1]}`);\n              console.log(`${item[0]} price : 1$`);\n              console.log(`Balance ${item[0]} : ${item[1] * 1}$`);\n              sum += 1 * item[1];\n            }\n            console.log(`Balance total usd : ${sum}$`);\n        }\n        ourRequest.send();\n      }\n    });\n}) ();\n}\n\nexport {api}\n"]},"metadata":{},"sourceType":"module"}